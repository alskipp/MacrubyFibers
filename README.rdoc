= Macruby Fibers

An attempt to implement Ruby 1.9 Fibers[http://ruby-doc.org/core-1.9.3/Fiber.html] in Macruby using {Grand Central Dispatch}[http://developer.apple.com/library/mac/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html] (GCD).

== Implementation Info
Each fiber is given its own serial dispatch queue which is suspended and resumed as needed. Consequently, this means that each fiber is backed by a thread (which is not the case in MRI Ruby). However as GCD is in control of thread creation and allocation, this does not necessarily mean that a new thread is created every time a Fiber is created. GCD can reuse threads that were created for Fibers which have subsequently been used and are no longer alive. Threads can not be reallocated to new Fibers if previous Fibers are still alive, which means it is possible that multitudes of threads will be created in certain circumstances.

Threads will not be created or reallocated until a fiber has been resumed, therefore, 100 threads will NOT be immediately created if 100 Fibers are created.

=== Results from running Fibers Rubyspec:
4 files, 25 examples, 51 expectations, 3 failures, 0 errors

["raises a FiberError when transferring to a Fiber which resumes itself"]
The FiberError is raised, but on a different dispatch queue to the caller. Need to somehow raise the error on the same dispatch queue as the caller.

["raises a LocalJumpError if the block includes a return statement"]
Not implemented - Test causes a Macruby crash - EXC_CRASH (SIGABRT)

["raises a LocalJumpError if the block includes a break statement"]
Not implemented